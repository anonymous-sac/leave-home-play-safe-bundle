{"version":3,"sources":["Reducers/Basic/index.js","Reducers/Records/index.js","Reducers/index.js","registerServiceWorker.js","i18n.js","index.js","Reducers/type.js"],"names":["initState","basic","state","cloneDeep","action","target","type","data","isNil","newState","SET_BASIC_REDUCER","set","records","SET_RECORDS_REDUCER","PUSH_RECORDS_REDUCER","Array","isArray","push","reduxData","combineReducers","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","i18n","use","XHR","LanguageDetector","initReactI18next","init","fallbackLng","lng","debug","interpolation","escapeValue","react","bindI18n","bindI18nStore","transEmptyNodeValue","transSupportBasicHtmlNodes","transKeepBasicHtmlNodesFor","useSuspense","store","createStore","applyMiddleware","thunkMiddleware","createLogger","Router","lazy","ReactDOM","render","fallback","autoInsertSpaceInButton","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"2TAGMA,EAAY,GAmBHC,EAjBD,WAA2C,IAA1CC,EAAyC,uDAAjCC,oBAAUH,GAAYI,EAAW,uCAC9CC,EAAuBD,EAAvBC,OAAQC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,KACtB,GAAIC,gBAAMH,GAAS,OAAOH,EAE1B,IAAIO,EAAWN,oBAAUD,GACzB,OAAQI,GACN,KAAKI,IACH,MAAe,KAAXL,EAAsBE,GAC1BI,cAAIF,EAAUJ,EAAQE,GACfE,GAET,QACE,OAAOP,ICdPF,EAAY,GAuBHY,EArBC,WAA2C,IAA1CV,EAAyC,uDAAjCC,oBAAUH,GAAYI,EAAW,uCAChDC,EAAuBD,EAAvBC,OAAQC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,KAEtB,GAAe,KAAXF,EAAe,OAAOH,EAC1B,IAAIO,EAAWN,oBAAUD,GAEzB,OAAQI,GACN,KAAKO,IACH,OAAOV,oBAAUI,GAEnB,KAAKO,IAGD,OAFEC,MAAMC,QAAQP,IAChBA,EAASQ,KAAKV,GACPE,EAEX,QACE,OAAOP,ICZEgB,EALGC,YAAgB,CAChClB,QACAW,YCIIQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhC,QACf0B,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,6CC1EjEC,IACGC,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJC,KAAK,CACJC,YAAa,CAAC,QAAS,SACvBC,IAAK,QACLC,OAAO,EACPC,cAAe,CACbC,aAAa,GAEfC,MAAO,CACLC,SAAU,kBACVC,cAAe,GACfC,oBAAqB,GACrBC,4BAA4B,EAC5BC,2BAA4B,CAAC,KAAM,SAAU,KAC7CC,aAAa,KAKJjB,EAAf,E,OAAeA,ICXTkB,EAAQC,YACZ3C,EACA4C,YACEC,IACAC,2BAIEC,EAASC,gBAAK,kBAAM,uDAE1BC,IAASC,OACP,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,IAAD,CAAgBU,yBAAyB,GACvC,kBAACL,EAAD,SAINM,SAASC,eAAe,SFdX,WACb,GAA6C,kBAAmB5C,UAAW,CAGzE,GADkB,IAAI6C,IAAIC,GAAwBpD,OAAOC,UAC3CoD,SAAWrD,OAAOC,SAASoD,OAIvC,OAGFrD,OAAOsD,iBAAiB,QAAQ,WAC9B,IAAMjD,EAAK,UAAM+C,GAAN,sBAEPtD,IAiDV,SAAiCO,GAE/BkD,MAAMlD,GACHI,MAAK,SAAA+C,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CtD,UAAUC,cAAcsD,MAAMpD,MAAK,SAAAC,GACjCA,EAAaoD,aAAarD,MAAK,WAC7BT,OAAOC,SAAS8D,eAKpB3D,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEA+C,CAAwB3D,GAIxBC,UAAUC,cAAcsD,MAAMpD,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OEZxB4D,I,gCCpCA,sGACO,IAGM7E,EAAoB,oBAGpBG,EAAsB,sBACtBC,EAAuB,yB","file":"static/js/main.030166ce.chunk.js","sourcesContent":["import { isNil, set, cloneDeep } from 'lodash';\nimport { SET_BASIC_REDUCER } from './../type';\n\nconst initState = {};\n\nconst basic = (state = cloneDeep(initState), action) => {\n  const { target, type, data } = action;\n  if (isNil(target)) return state;\n\n  let newState = cloneDeep(state);\n  switch (type) {\n    case SET_BASIC_REDUCER: {\n      if (target === '') return data;\n      set(newState, target, data);\n      return newState;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport default basic;\n","import { cloneDeep } from 'lodash';\nimport { SET_RECORDS_REDUCER, PUSH_RECORDS_REDUCER } from './../type';\n\nconst initState = [];\n\nconst records = (state = cloneDeep(initState), action) => {\n  const { target, type, data } = action;\n\n  if (target !== '') return state;\n  let newState = cloneDeep(state);\n\n  switch (type) {\n    case SET_RECORDS_REDUCER: {\n      return cloneDeep(data);\n    }\n    case PUSH_RECORDS_REDUCER: {\n      if (Array.isArray(newState)) {\n        newState.push(data);\n      } return newState;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport default records;\n","import { combineReducers } from 'redux';\nimport basic from './Basic';\nimport records from './Records';\n\nconst reduxData = combineReducers({\n  basic,\n  records\n});\n\nexport default reduxData;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import i18n from 'i18next';\nimport XHR from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n  .use(XHR)\n  .use(LanguageDetector)\n  .use(initReactI18next) // bind react-i18next to the instance\n  .init({\n    fallbackLng: ['zh-hk', 'zh-cn'],\n    lng: 'zh-hk',\n    debug: true,\n    interpolation: {\n      escapeValue: false, // not needed for react!!\n    },\n    react: {\n      bindI18n: 'languageChanged',\n      bindI18nStore: '',\n      transEmptyNodeValue: '',\n      transSupportBasicHtmlNodes: true,\n      transKeepBasicHtmlNodesFor: ['br', 'strong', 'i'],\n      useSuspense: true,\n    }\n  });\n\n\nexport default i18n;\n","import React, { lazy, Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ConfigProvider } from 'antd';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport 'antd/dist/antd.css';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\n\nimport reduxData from './Reducers';\nimport registerServiceWorker from './registerServiceWorker';\nimport './i18n';\nimport './Assets/styles/style.scss';\n\nconst store = createStore(\n  reduxData,\n  applyMiddleware(\n    thunkMiddleware,\n    createLogger(),\n  ),\n);\n\nconst Router = lazy(() => import('./router'));\n\nReactDOM.render(\n  <Suspense fallback={null}>\n    <Provider store={store}>\n      <ConfigProvider autoInsertSpaceInButton={false}>\n        <Router />\n      </ConfigProvider>\n    </Provider>\n  </Suspense>\n, document.getElementById('root'));\n\nregisterServiceWorker();\n\n","/* General */\nexport const ERROR = 'ERROR';\n\n/* Basic */\nexport const SET_BASIC_REDUCER = 'SET_BASIC_REDUCER';\n\n/* Record */\nexport const SET_RECORDS_REDUCER = 'SET_RECORDS_REDUCER';\nexport const PUSH_RECORDS_REDUCER = 'PUSH_RECORDS_REDUCER';"],"sourceRoot":""}